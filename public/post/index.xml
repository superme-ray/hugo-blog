<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 码哥Ray的博客</title>
    <link>https://superme-ray.github.io/post/</link>
    <description>Recent content in Posts on 码哥Ray的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 31 May 2019 09:29:18 +0800</lastBuildDate>
    
	<atom:link href="https://superme-ray.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>前后端解耦</title>
      <link>https://superme-ray.github.io/post/%E5%89%8D%E5%90%8E%E7%AB%AF%E8%A7%A3%E8%80%A6/</link>
      <pubDate>Fri, 31 May 2019 09:29:18 +0800</pubDate>
      
      <guid>https://superme-ray.github.io/post/%E5%89%8D%E5%90%8E%E7%AB%AF%E8%A7%A3%E8%80%A6/</guid>
      <description>作者：山河远阔 https://blog.csdn.net/weixin_37539378/article/details/79956760
一、前言
”前后端分离“已经成为互联网项目开发的业界标杆，通过Tomcat+Ngnix(也可以中间有个Node.js)，有效地进行解耦。并且前后端分离会为以后的大型分布式架构、弹性计算架构、微服务架构、多端化服务（多种客户端，例如：浏览器，车载终端，安卓，IOS等等）打下坚实的基础。
前后端分离(解耦)的核心思想是：前端Html页面通过Ajax调用后端的RestFul API并使用Json数据进行交互。
注：【在互联网架构中，web服务器：一般指像nginx，apache这类的服务器，他们一般只能解析静态资源。 应用服务器：一般指像tomcat，jetty，resin这类的服务器可以解析动态资源也可以解析静态资源，但解析静态资源的能力没有web服务器好。】 一般只有Web服务器才能被外网访问，应用服务器只能内网访问。
二、为什么前后端分离
一般公司后端开发人员直接兼顾前端的工作，一边实现API接口，一边开发页面，两者互相切换着做，而且根据不同的url动态拼接页面，这也导致后台的开发压力大大增加。前后端工作分配不均。不仅仅开发效率慢，而且代码难以维护。
而前后端分离的话，则可以很好的解决前后端分工不均的问题，将更多的交互逻辑分配给前端来处理，而后端则可以专注于其本职工作，比如提供API接口，进行权限控制以及进行运算工作。而前端开发人员则可以利用nodejs来搭建自己的本地服务器，直接在本地开发，然后通过一些插件来将api请求转发到后台，这样就可以完全模拟线上的场景，并且与后台解耦。前端可以独立完成与用户交互的整一个过程，两者都可以同时开工，不互相依赖，开发效率更快，而且分工比较均衡。
三、从MVC到前后端分离
MVC 是一种经典的设计模式，全名为 Model-View-Controller，即 模型-视图-控制器。
其中，模型 是用于封装数据的载体，例如，在 Java 中一般通过一个简单的 POJO（Plain Ordinary Java Object）来表示，其本质是一个普通的 Java Bean，包含一系列的成员变量及其 getter/setter 方法。对于 视图 而言，它更加偏重于展现，也就是说，视图决定了界面到底长什么样子，在 Java 中可通过 JSP 来充当视图，或者通过纯 HTML 的方式进行展现，而后者才是目前的主流。模型和视图需要通过 控制器 来进行粘合，例如，用户发送一个 HTTP 请求，此时该请求首先会进入控制器，然后控制器去获取数据并将其封装为模型，最后将模型传递到视图中进行展现。
综上所述，MVC 的交互过程如下图所示：
也就是说，我们输入的是 AJAX 请求，输出的是 JSON 数据，市面上有这样的技术来实现这个功能吗？答案是 REST。
REST 全称是 Representational State Transfer（表述性状态转移），它是 Roy Fielding 博士在 2000 年写的一篇关于软件架构风格的论文，此文一出，威震四方！国内外许多知名互联网公司纷纷开始采用这种轻量级的 Web 服务，大家习惯将其称为 RESTful Web Services，或简称 REST 服务。
如果将浏览器这一端视为前端，而服务器那一端视为后端的话，可以将以上改进后的 MVC 模式简化为以下前后端分离模式：
可见，有了 REST 服务，前端关注界面展现，后端关注业务逻辑，分工明确，职责清晰。</description>
    </item>
    
    <item>
      <title>计算时间差的方法</title>
      <link>https://superme-ray.github.io/post/gen_code/</link>
      <pubDate>Wed, 29 May 2019 14:59:59 +0800</pubDate>
      
      <guid>https://superme-ray.github.io/post/gen_code/</guid>
      <description>const formatDiffTime = (endDate) =&amp;gt; { let startTime = moment().toDate(); //开始时间 let endTime = moment(endDate, &#39;YYYY:MM:DD HH:mm:ss&#39;).toDate(); //结束时间 let diffTime = startTime.getTime() - endTime.getTime(); //时间差的毫秒数 //计算出相差天数 let days = Math.floor(diffTime / (24 * 3600 * 1000)); //计算出小时数 let leave1_h = diffTime % (24 * 3600 * 1000); //计算天数后剩余的毫秒数 let hours = Math.floor(leave1_h / (3600 * 1000)); //计算出分钟数 let leave1_m = leave1_h % (1000 * 3600);//计算小时后剩余的毫秒数 let minutes = Math.floor(leave1_m / (1000 * 60)); if (days &amp;amp;&amp;amp; !</description>
    </item>
    
  </channel>
</rss>