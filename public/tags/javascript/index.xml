<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javascript on 码哥Ray的博客</title>
    <link>https://superme-ray.github.io/tags/javascript/</link>
    <description>Recent content in javascript on 码哥Ray的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 12 Jul 2019 11:05:39 +0800</lastBuildDate>
    
	<atom:link href="https://superme-ray.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SPA SEO SSR三者区别</title>
      <link>https://superme-ray.github.io/post/spa-seo-ssr%E4%B8%89%E8%80%85%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Fri, 12 Jul 2019 11:05:39 +0800</pubDate>
      
      <guid>https://superme-ray.github.io/post/spa-seo-ssr%E4%B8%89%E8%80%85%E5%8C%BA%E5%88%AB/</guid>
      <description>SPA通俗的说就是单页面应用（single page application） 优点 页面之间的切换非常快 一定程度减少了后端服务器的压力 后端程序只需要提供api，不需要客户端到底是web端还是手机等
缺点 首屏打开速度很慢，因为用户首次加载需要先下载SPA框架及应用程序的代码，然后再渲染页面。 不利于SEO搜索引擎优化
SEO通俗的说就是搜索引擎优化(search engine optimization) SEO是一种通过了解搜索引擎的运作规则（如何抓取网站页面，如何索引以及如何根据特定的关键字展现搜索结果排序等）来调整网站，以提高该网站在搜索引擎中某些关键词的搜索结果排名。
我们之前说SPA单页面应用，通过AJAX获取数据，这就难保证我们的页面能被搜索引擎正常收到，并且有一些搜索引擎不支持执行js和通过ajax获取数据，那就更不用提SEO了。为了解决这个问题，，SSR登场了 SSR通俗的说就是服务器端渲染(server side rendering) 优点 更快的响应时间，不用等待所有的js都下载完成，浏览器变成显示比较完整的页面 更好的SSR，我们可以将SEO的关键信息直接在后台就渲染成html，从而保证搜索引擎的爬虫都能爬取到关键数据
缺点 占用更多的cpu和内存资源 一些常用的浏览器的api可能无法正常使用，比如window，document，alert等，如果使用的话需要对运行环境加以判断 开发调试会有一些麻烦，因为涉及到了浏览器及服务器，对于SPA的一些组件的声明周期的管理会变得复杂 可能会由于某些因素导致服务器渲染的结果与浏览器端的结果不一致。
前后端分离的概念 传统的web前后端开发大多是前端将页面写好，让后端将页面集成到项目中，这里就存着一个前后端耦合的问题，首先对于后端来说，不仅要写后端逻辑，还得要集成前端页面。对于前端来说，也不是很轻松就能看到页面的真正渲染出来的样子，这样 肯定是不利于开发调试的，效率自然也就成了问题。针对上述问题，前后端分离的思想应运而生。
基本概念 前后端根据AJAX接口进行数据的交互，目前常见的是后端直接将数据已JSON的格式返回给前端，前端根据后端服务器返回的数据，操作DOM。
主要优点 分工明确，前后端各司其职，后端专注业务逻辑和功能的实现，前端专注页面实现和渲染。 接口明确，并行开发。在后端接口没有实现好之前，前端可以自己模拟接口提供测试数据。 提高开发效率，一定程度上减少了前后端的沟通成本
总结 前后端分离降低了前端和都端的耦合度，提高了开发效率； SPA是前后端分离中前端的一种解决方案； SEO对于跟多网站很重要而普通的SPA又不利于SEO； SSR的出现一定成都上解决了SPA首屏慢的问题，又极大减少了普通SPA对于SEO的不利影响。</description>
    </item>
    
    <item>
      <title>Moment相加相减时间方式</title>
      <link>https://superme-ray.github.io/post/moment%E7%9B%B8%E5%8A%A0%E7%9B%B8%E5%87%8F%E6%97%B6%E9%97%B4%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Thu, 04 Jul 2019 14:19:13 +0800</pubDate>
      
      <guid>https://superme-ray.github.io/post/moment%E7%9B%B8%E5%8A%A0%E7%9B%B8%E5%87%8F%E6%97%B6%E9%97%B4%E6%96%B9%E5%BC%8F/</guid>
      <description>利用moment对时间进行加减天数，小时数方法 var startTime = &amp;lsquo;2017-12-12&amp;rsquo; 对startTime进行加减一天的方法如下 moment(new Date(startTime)).add(1,&amp;lsquo;days&amp;rsquo;) moment(new Date(startTime)).subtract(1,&amp;lsquo;days&amp;rsquo;)
 需要注意的是，moment(param).add()中的param必须是ＩＳＯ格式的时间．不然无效．
 </description>
    </item>
    
    <item>
      <title>小程序运行机制</title>
      <link>https://superme-ray.github.io/post/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Wed, 03 Jul 2019 09:44:49 +0800</pubDate>
      
      <guid>https://superme-ray.github.io/post/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6/</guid>
      <description> #小程序运行机制
小程序启动
小程序启动会有两种情况  「热启动」 &amp;gt;热启动：假如用户已经打开过某小程序，然后在一定时间内再次打开该小程序，此时无需重新启动，只需将后台态的小程序切换到前台，这个过程就是热启动；
 「冷启动」 &amp;gt;冷启动：用户首次打开或小程序被微信主动销毁后再次打开的情况，此时小程序需要重新加载启动，即冷启动。 小程序没有重启的概念。
   前台/后台状态 当用户点击右上角胶囊按钮关闭小程序，或者按了设备 Home 键离开微信时，小程序并没有直接销毁，而是进入了后台状态； 当用户再次进入微信或再次打开小程序，小程序又会从后台进入前台。   小程序销毁 当小程序进入后台，客户端会维持一段时间的运行状态，超过一定时间后（目前是5分钟）小程序会被微信主动销毁。 当小程序占用系统资源过高，可能会被系统销毁或被微信客户端主动回收。 在 iOS 上，当微信客户端在一定时间间隔内（目前是 5 秒）连续收到两次及以上系统内存告警时，会主动进行小程序的销毁，并提示用户 「该小程序可能导致微信响应变慢被终止」。 建议小程序在必要时使用 wx.onMemoryWarning 监听内存告警事件，进行必要的内存清理。 &amp;gt;需要注意的是：只有当小程序进入后台一定时间，或者系统资源占用过高，才会被真正的销毁。 &amp;gt;基础库 1.1.0 及以上，1.4.0 以下版本： 当用户从扫一扫、转发等入口（场景值为1007, 1008, 1011, 1025）进入小程序，且没有置顶小程序的情况下退出，小程序会被销毁。  </description>
    </item>
    
    <item>
      <title>前后端解耦</title>
      <link>https://superme-ray.github.io/post/%E5%89%8D%E5%90%8E%E7%AB%AF%E8%A7%A3%E8%80%A6/</link>
      <pubDate>Fri, 31 May 2019 09:29:18 +0800</pubDate>
      
      <guid>https://superme-ray.github.io/post/%E5%89%8D%E5%90%8E%E7%AB%AF%E8%A7%A3%E8%80%A6/</guid>
      <description>作者：山河远阔 https://blog.csdn.net/weixin_37539378/article/details/79956760
一、前言
”前后端分离“已经成为互联网项目开发的业界标杆，通过Tomcat+Ngnix(也可以中间有个Node.js)，有效地进行解耦。并且前后端分离会为以后的大型分布式架构、弹性计算架构、微服务架构、多端化服务（多种客户端，例如：浏览器，车载终端，安卓，IOS等等）打下坚实的基础。
前后端分离(解耦)的核心思想是：前端Html页面通过Ajax调用后端的RestFul API并使用Json数据进行交互。
注：【在互联网架构中，web服务器：一般指像nginx，apache这类的服务器，他们一般只能解析静态资源。 应用服务器：一般指像tomcat，jetty，resin这类的服务器可以解析动态资源也可以解析静态资源，但解析静态资源的能力没有web服务器好。】 一般只有Web服务器才能被外网访问，应用服务器只能内网访问。
二、为什么前后端分离
一般公司后端开发人员直接兼顾前端的工作，一边实现API接口，一边开发页面，两者互相切换着做，而且根据不同的url动态拼接页面，这也导致后台的开发压力大大增加。前后端工作分配不均。不仅仅开发效率慢，而且代码难以维护。
而前后端分离的话，则可以很好的解决前后端分工不均的问题，将更多的交互逻辑分配给前端来处理，而后端则可以专注于其本职工作，比如提供API接口，进行权限控制以及进行运算工作。而前端开发人员则可以利用nodejs来搭建自己的本地服务器，直接在本地开发，然后通过一些插件来将api请求转发到后台，这样就可以完全模拟线上的场景，并且与后台解耦。前端可以独立完成与用户交互的整一个过程，两者都可以同时开工，不互相依赖，开发效率更快，而且分工比较均衡。
三、从MVC到前后端分离
MVC 是一种经典的设计模式，全名为 Model-View-Controller，即 模型-视图-控制器。
其中，模型 是用于封装数据的载体，例如，在 Java 中一般通过一个简单的 POJO（Plain Ordinary Java Object）来表示，其本质是一个普通的 Java Bean，包含一系列的成员变量及其 getter/setter 方法。对于 视图 而言，它更加偏重于展现，也就是说，视图决定了界面到底长什么样子，在 Java 中可通过 JSP 来充当视图，或者通过纯 HTML 的方式进行展现，而后者才是目前的主流。模型和视图需要通过 控制器 来进行粘合，例如，用户发送一个 HTTP 请求，此时该请求首先会进入控制器，然后控制器去获取数据并将其封装为模型，最后将模型传递到视图中进行展现。
综上所述，MVC 的交互过程如下图所示：
也就是说，我们输入的是 AJAX 请求，输出的是 JSON 数据，市面上有这样的技术来实现这个功能吗？答案是 REST。
REST 全称是 Representational State Transfer（表述性状态转移），它是 Roy Fielding 博士在 2000 年写的一篇关于软件架构风格的论文，此文一出，威震四方！国内外许多知名互联网公司纷纷开始采用这种轻量级的 Web 服务，大家习惯将其称为 RESTful Web Services，或简称 REST 服务。
如果将浏览器这一端视为前端，而服务器那一端视为后端的话，可以将以上改进后的 MVC 模式简化为以下前后端分离模式：
可见，有了 REST 服务，前端关注界面展现，后端关注业务逻辑，分工明确，职责清晰。</description>
    </item>
    
    <item>
      <title>计算时间差的方法</title>
      <link>https://superme-ray.github.io/post/gen_code/</link>
      <pubDate>Wed, 29 May 2019 14:59:59 +0800</pubDate>
      
      <guid>https://superme-ray.github.io/post/gen_code/</guid>
      <description>const formatDiffTime = (endDate) =&amp;gt; { let startTime = moment().toDate(); //开始时间 let endTime = moment(endDate, &#39;YYYY:MM:DD HH:mm:ss&#39;).toDate(); //结束时间 let diffTime = startTime.getTime() - endTime.getTime(); //时间差的毫秒数 //计算出相差天数 let days = Math.floor(diffTime / (24 * 3600 * 1000)); //计算出小时数 let leave1_h = diffTime % (24 * 3600 * 1000); //计算天数后剩余的毫秒数 let hours = Math.floor(leave1_h / (3600 * 1000)); //计算出分钟数 let leave1_m = leave1_h % (1000 * 3600);//计算小时后剩余的毫秒数 let minutes = Math.floor(leave1_m / (1000 * 60)); if (days &amp;amp;&amp;amp; !</description>
    </item>
    
  </channel>
</rss>