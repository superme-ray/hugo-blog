<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>码哥Ray的博客</title>
    <link>https://superme-ray.github.io/</link>
    <description>Recent content on 码哥Ray的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 03 Jul 2019 09:44:49 +0800</lastBuildDate>
    
	<atom:link href="https://superme-ray.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>小程序运行机制</title>
      <link>https://superme-ray.github.io/post/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Wed, 03 Jul 2019 09:44:49 +0800</pubDate>
      
      <guid>https://superme-ray.github.io/post/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6/</guid>
      <description> #小程序运行机制
小程序启动
小程序启动会有两种情况  「热启动」 &amp;gt;热启动：假如用户已经打开过某小程序，然后在一定时间内再次打开该小程序，此时无需重新启动，只需将后台态的小程序切换到前台，这个过程就是热启动；
 「冷启动」 &amp;gt;冷启动：用户首次打开或小程序被微信主动销毁后再次打开的情况，此时小程序需要重新加载启动，即冷启动。 小程序没有重启的概念。
   前台/后台状态 当用户点击右上角胶囊按钮关闭小程序，或者按了设备 Home 键离开微信时，小程序并没有直接销毁，而是进入了后台状态； 当用户再次进入微信或再次打开小程序，小程序又会从后台进入前台。   小程序销毁 当小程序进入后台，客户端会维持一段时间的运行状态，超过一定时间后（目前是5分钟）小程序会被微信主动销毁。 当小程序占用系统资源过高，可能会被系统销毁或被微信客户端主动回收。 在 iOS 上，当微信客户端在一定时间间隔内（目前是 5 秒）连续收到两次及以上系统内存告警时，会主动进行小程序的销毁，并提示用户 「该小程序可能导致微信响应变慢被终止」。 建议小程序在必要时使用 wx.onMemoryWarning 监听内存告警事件，进行必要的内存清理。 &amp;gt;需要注意的是：只有当小程序进入后台一定时间，或者系统资源占用过高，才会被真正的销毁。 &amp;gt;基础库 1.1.0 及以上，1.4.0 以下版本： 当用户从扫一扫、转发等入口（场景值为1007, 1008, 1011, 1025）进入小程序，且没有置顶小程序的情况下退出，小程序会被销毁。  </description>
    </item>
    
    <item>
      <title>微信小程序显示md－html的方式</title>
      <link>https://superme-ray.github.io/post/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%98%BE%E7%A4%BAmdhtml%E7%9A%84%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Fri, 28 Jun 2019 09:03:41 +0800</pubDate>
      
      <guid>https://superme-ray.github.io/post/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%98%BE%E7%A4%BAmdhtml%E7%9A%84%E6%96%B9%E5%BC%8F/</guid>
      <description>###实现微信小程序中对html 和　markdown　的渲预染有多种方法，可以利用第三方插件，比如wxParse, toWxml等，但是从1.4版本之后，微信退出了自己组件，足以支持这些需求．
##riche-text组件
&amp;lt;rich-text nodes=&amp;quot;{{nodes}}&amp;quot; bindtap=&amp;quot;tap&amp;quot;&amp;gt;&amp;lt;/rich-text&amp;gt; Page({ data: { nodes: [{ name: &#39;div&#39;, attrs: { class: &#39;div_class&#39;, style: &#39;line-height: 60px; color: red;&#39; }, children: [{ type: &#39;text&#39;, text: &#39;Hello&amp;amp;nbsp;World!&#39; }] }] }, tap() { console.log(&#39;tap&#39;) } })  ###其中nodes参数支持数组和String　２种参数方式．但是一般不推荐字符串类型，会降低性能．</description>
    </item>
    
    <item>
      <title>Node Schedule模块的一般使用方法</title>
      <link>https://superme-ray.github.io/post/node-schedule%E6%A8%A1%E5%9D%97%E7%9A%84%E4%B8%80%E8%88%AC%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</link>
      <pubDate>Fri, 21 Jun 2019 11:46:41 +0800</pubDate>
      
      <guid>https://superme-ray.github.io/post/node-schedule%E6%A8%A1%E5%9D%97%E7%9A%84%E4%B8%80%E8%88%AC%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</guid>
      <description>node-schedule做定时任务有《两种》方式可以选择 方式1「Date-based Scheduling」
&amp;quot;use strict&amp;quot;; var schedule = require(&amp;quot;node-schedule&amp;quot;); //1. 确定的时间执行 var date = new Date(2016,6,13,15,50,0); schedule.scheduleJob(date, function(){ console.log(&amp;quot;执行任务&amp;quot;); }); //2. 秒为单位执行 //比如:每5秒执行一次 var rule1 = new schedule.RecurrenceRule(); var times1 = [1,6,11,16,21,26,31,36,41,46,51,56]; rule1.second = times1; schedule.scheduleJob(rule1, function(){ console.log(&amp;quot;执行任务秒为单位&amp;quot;); }); //3.以分为单位执行 //比如:每5分种执行一次 var rule2 = new schedule.RecurrenceRule(); var times2 = [1,6,11,16,21,26,31,36,41,46,51,56]; rule2.minute = times2; schedule.scheduleJob(rule2, function(){ console.log(&amp;quot;执行任务分为单位&amp;quot;); }); //4.以天单位执行 //比如:每天6点30分执行 var rule = new schedule.RecurrenceRule(); rule.dayOfWeek = [0, new schedule.Range(1, 6)]; rule.</description>
    </item>
    
    <item>
      <title>Nodemailer模块实现node邮件发送</title>
      <link>https://superme-ray.github.io/post/nodemailer%E6%A8%A1%E5%9D%97%E5%AE%9E%E7%8E%B0node%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/</link>
      <pubDate>Thu, 20 Jun 2019 16:11:02 +0800</pubDate>
      
      <guid>https://superme-ray.github.io/post/nodemailer%E6%A8%A1%E5%9D%97%E5%AE%9E%E7%8E%B0node%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/</guid>
      <description>const nodemailer = require(&#39;nodemailer&#39;); //发送邮件的node插件 let transporter = nodemailer.createTransport({ service: &#39;126&#39;, // 发送者的邮箱厂商，支持列表：https://nodemailer.com/smtp/well-known/ port: 465, // SMTP 端口 secureConnection: true, // SSL安全链接 auth: { //发送者的账户密码 user: &#39;artistcoder@126.com&#39;, //账户 pass: &#39;xxxx&#39;, //smtp授权码，到邮箱设置下获取 } }); let mailOptions = { from: &#39;&amp;quot;vince&amp;quot; &amp;lt;artistcoder@126.com&amp;gt;&#39;, // 发送者昵称和地址 to: &#39;like@vince.studio&#39;, // 接收者的邮箱地址 subject: &#39;一封暖暖的小邮件&#39;, // 邮件主题 text: &#39;test mail&#39;, //邮件的text // html: html //也可以用html发送 }; //发送邮件 transporter.sendMail(mailOptions, (error, info) =&amp;gt; { if (error) { return console.log(error); } console.</description>
    </item>
    
    <item>
      <title>Console控制台输出对齐</title>
      <link>https://superme-ray.github.io/post/console%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA%E5%AF%B9%E9%BD%90/</link>
      <pubDate>Thu, 06 Jun 2019 11:30:22 +0800</pubDate>
      
      <guid>https://superme-ray.github.io/post/console%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA%E5%AF%B9%E9%BD%90/</guid>
      <description>利用占位符 &amp;lsquo;\t&amp;rsquo;来进行对齐
const obj = { version:&#39;2.5.6&#39;, des:&#39;test is a test&#39;, create_time:&#39;2019-12-12&#39; } console.log(&#39;version:\t\t&#39;+obj.version) console.log(&#39;des:\t\t\t&#39;+obj.des) console.log(&#39;create_time:\t&#39;+obj.create_time)  在控制台输出的结果就是行之间对齐的</description>
    </item>
    
    <item>
      <title>Java扑克牌发牌逻辑</title>
      <link>https://superme-ray.github.io/post/java%E6%89%91%E5%85%8B%E7%89%8C%E5%8F%91%E7%89%8C%E9%80%BB%E8%BE%91/</link>
      <pubDate>Fri, 31 May 2019 14:22:46 +0800</pubDate>
      
      <guid>https://superme-ray.github.io/post/java%E6%89%91%E5%85%8B%E7%89%8C%E5%8F%91%E7%89%8C%E9%80%BB%E8%BE%91/</guid>
      <description>package run; import java.lang.reflect.Array; import java.util.ArrayList; import java.util.Collections; /* * 1.准备牌 * 2.洗牌 * 3.发牌 * 4.看牌 * */ public class PokerDemo { public static void main(String[] args) { //定义一个动态数组存储扑克 ArrayList&amp;lt;String&amp;gt; poker = new ArrayList&amp;lt;&amp;gt;(); //定义一个数组放牌的颜色 //定义一个数组存储牌的13个序号 //定义４个集合 String[] colors = new String[]{&amp;quot;♥&amp;quot;, &amp;quot;♠&amp;quot;, &amp;quot;♣&amp;quot;, &amp;quot;♦&amp;quot;}; String[] numbers = {&amp;quot;2&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;K&amp;quot;, &amp;quot;Q&amp;quot;, &amp;quot;J&amp;quot;, &amp;quot;10&amp;quot;, &amp;quot;9&amp;quot;, &amp;quot;8&amp;quot;, &amp;quot;7&amp;quot;, &amp;quot;6&amp;quot;, &amp;quot;5&amp;quot;, &amp;quot;4&amp;quot;, &amp;quot;3&amp;quot;}; //先把大王小王存储到动态数组中 poker.add(&amp;quot;大王&amp;quot;); poker.add(&amp;quot;小王&amp;quot;); //循环嵌套牌的颜色和牌的数值，得到52张牌 for (String number : numbers) { for (String color : colors) { poker.</description>
    </item>
    
    <item>
      <title>前后端解耦</title>
      <link>https://superme-ray.github.io/post/%E5%89%8D%E5%90%8E%E7%AB%AF%E8%A7%A3%E8%80%A6/</link>
      <pubDate>Fri, 31 May 2019 09:29:18 +0800</pubDate>
      
      <guid>https://superme-ray.github.io/post/%E5%89%8D%E5%90%8E%E7%AB%AF%E8%A7%A3%E8%80%A6/</guid>
      <description>作者：山河远阔 https://blog.csdn.net/weixin_37539378/article/details/79956760
一、前言
”前后端分离“已经成为互联网项目开发的业界标杆，通过Tomcat+Ngnix(也可以中间有个Node.js)，有效地进行解耦。并且前后端分离会为以后的大型分布式架构、弹性计算架构、微服务架构、多端化服务（多种客户端，例如：浏览器，车载终端，安卓，IOS等等）打下坚实的基础。
前后端分离(解耦)的核心思想是：前端Html页面通过Ajax调用后端的RestFul API并使用Json数据进行交互。
注：【在互联网架构中，web服务器：一般指像nginx，apache这类的服务器，他们一般只能解析静态资源。 应用服务器：一般指像tomcat，jetty，resin这类的服务器可以解析动态资源也可以解析静态资源，但解析静态资源的能力没有web服务器好。】 一般只有Web服务器才能被外网访问，应用服务器只能内网访问。
二、为什么前后端分离
一般公司后端开发人员直接兼顾前端的工作，一边实现API接口，一边开发页面，两者互相切换着做，而且根据不同的url动态拼接页面，这也导致后台的开发压力大大增加。前后端工作分配不均。不仅仅开发效率慢，而且代码难以维护。
而前后端分离的话，则可以很好的解决前后端分工不均的问题，将更多的交互逻辑分配给前端来处理，而后端则可以专注于其本职工作，比如提供API接口，进行权限控制以及进行运算工作。而前端开发人员则可以利用nodejs来搭建自己的本地服务器，直接在本地开发，然后通过一些插件来将api请求转发到后台，这样就可以完全模拟线上的场景，并且与后台解耦。前端可以独立完成与用户交互的整一个过程，两者都可以同时开工，不互相依赖，开发效率更快，而且分工比较均衡。
三、从MVC到前后端分离
MVC 是一种经典的设计模式，全名为 Model-View-Controller，即 模型-视图-控制器。
其中，模型 是用于封装数据的载体，例如，在 Java 中一般通过一个简单的 POJO（Plain Ordinary Java Object）来表示，其本质是一个普通的 Java Bean，包含一系列的成员变量及其 getter/setter 方法。对于 视图 而言，它更加偏重于展现，也就是说，视图决定了界面到底长什么样子，在 Java 中可通过 JSP 来充当视图，或者通过纯 HTML 的方式进行展现，而后者才是目前的主流。模型和视图需要通过 控制器 来进行粘合，例如，用户发送一个 HTTP 请求，此时该请求首先会进入控制器，然后控制器去获取数据并将其封装为模型，最后将模型传递到视图中进行展现。
综上所述，MVC 的交互过程如下图所示：
也就是说，我们输入的是 AJAX 请求，输出的是 JSON 数据，市面上有这样的技术来实现这个功能吗？答案是 REST。
REST 全称是 Representational State Transfer（表述性状态转移），它是 Roy Fielding 博士在 2000 年写的一篇关于软件架构风格的论文，此文一出，威震四方！国内外许多知名互联网公司纷纷开始采用这种轻量级的 Web 服务，大家习惯将其称为 RESTful Web Services，或简称 REST 服务。
如果将浏览器这一端视为前端，而服务器那一端视为后端的话，可以将以上改进后的 MVC 模式简化为以下前后端分离模式：
可见，有了 REST 服务，前端关注界面展现，后端关注业务逻辑，分工明确，职责清晰。</description>
    </item>
    
    <item>
      <title>计算时间差的方法</title>
      <link>https://superme-ray.github.io/post/gen_code/</link>
      <pubDate>Wed, 29 May 2019 14:59:59 +0800</pubDate>
      
      <guid>https://superme-ray.github.io/post/gen_code/</guid>
      <description>const formatDiffTime = (endDate) =&amp;gt; { let startTime = moment().toDate(); //开始时间 let endTime = moment(endDate, &#39;YYYY:MM:DD HH:mm:ss&#39;).toDate(); //结束时间 let diffTime = startTime.getTime() - endTime.getTime(); //时间差的毫秒数 //计算出相差天数 let days = Math.floor(diffTime / (24 * 3600 * 1000)); //计算出小时数 let leave1_h = diffTime % (24 * 3600 * 1000); //计算天数后剩余的毫秒数 let hours = Math.floor(leave1_h / (3600 * 1000)); //计算出分钟数 let leave1_m = leave1_h % (1000 * 3600);//计算小时后剩余的毫秒数 let minutes = Math.floor(leave1_m / (1000 * 60)); if (days &amp;amp;&amp;amp; !</description>
    </item>
    
  </channel>
</rss>